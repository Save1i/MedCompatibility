const XLSX = require("xlsx");
const sequelize = require("../db");
const { Medication, Compatibility } = require("../models/models");

// –ú–∞–ø–ø–∏–Ω–≥ —Å–∏–º–≤–æ–ª–æ–≤ –≤ —Å—Ç–∞—Ç—É—Å—ã
const SYMBOL_TO_STATUS = {
  "++": "strong_enhancement",
  "+": "mild_enhancement",
  "-": "reduction",
  "*": "toxicity_increase",
  "‚ñ°": "no_data",
  "–Ω/—Å": "incompatible",
  "–Ω\\—Å": "incompatible",
  "–Ω/—Å.": "incompatible"
};

async function importData() {
  try {
    await sequelize.authenticate();
    console.log("üü¢ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ Neon DB");

    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
    const workbook = XLSX.readFile("./data/medication.xlsx");
    const sheet = workbook.Sheets[workbook.SheetNames[0]];
    const data = XLSX.utils.sheet_to_json(sheet, { header: 1 });

    const headers = data[0].slice(1); // –Ω–∞–∑–≤–∞–Ω–∏—è –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏
    const medicationMap = {};

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–µ–ø–∞—Ä–∞—Ç—ã
    for (let name of headers) {
      if (!name) continue;
      const cleanName = name.trim();
      const [med] = await Medication.findOrCreate({ where: { name: cleanName } });
      medicationMap[cleanName] = med.id;
    }

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
    for (let i = 1; i < data.length; i++) {
      const row = data[i];
      const rowMedName = row[0]?.trim();
      const rowMedId = medicationMap[rowMedName];

      if (!rowMedId) continue;

      for (let j = 1; j < row.length; j++) {
        const colMedName = headers[j - 1]?.trim();
        const colMedId = medicationMap[colMedName];

        const rawSymbol = String(row[j] || "").trim();
        const status = SYMBOL_TO_STATUS[rawSymbol];

        if (!status || rowMedId >= colMedId) continue;

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã
        const exists = await Compatibility.findOne({
          where: {
            medication1Id: rowMedId,
            medication2Id: colMedId
          }
        });

        if (!exists) {
          await Compatibility.create({
            medication1Id: rowMedId,
            medication2Id: colMedId,
            status
          });
        }
      }
    }

    console.log("‚úÖ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à—ë–Ω!");
    process.exit();
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ:", err);
    process.exit(1);
  }
}

importData();
